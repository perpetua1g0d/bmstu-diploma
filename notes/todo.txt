Todo:
[DONE] talos -> idp
context пробросить в запросы в idP

sign, verify enabled/auth -> signMode, verifyMode

1. Метрики
	[DONE] - в талосе token_result
	[DONE] - на клиенте auth_verified, auth_signed, token_issued
	- убрать log.fatalf так как теперь есть метрики с кодом ответов
	[DONE] + один большой красивый дашборд
1.2 Тестовое исследование (текущее)

2. База талоса + права в свою базу
	- или умолчать про базу? Мб просто хранить в файлике пока что если можно обновлять?
	+ [DONE] ручка UpdatePermissions(), GetPermissions()
	+ [DONE] ручка на сайдкаре refresh tokens()
3. Механизм управления доступами
	Админка: 
		- [DONE] добавить права
		- [DONE] запрос /refresh-tokens
		- установить TTL
		- U2I? - наверное не нужен, kubectl мб все же достаточно
		- [DONE] централизованное включение/выключение авторизации toggle (подумать про безопасность)
		- запускать исследование по кнопке (в другую постргю, кафку)
		- немного стилей + фикс галочек
4. [Мб в замечания отправить] Скоупы в токенах (не только сервис) + несколько скоупов в токене. token roles: {"scope": ["role1", ...]}
5. authClient рефактор + либа + раунд трип.
	- context пробросить везде 
	+ получение эндпоинтов из конфигурации, а то она сейчас не используется

6. Юзкейсы (поднять кафку например еще). Кафка, Редис, ETCD
	1. Кеширование результата запроса: Postgres выполняет тяжелый SELECT → сохраняет результат в Redis.
	2. Сброс кеша при изменении данных: При UPDATE в Postgres → удаление ключа в Redis.
	i2i в Prometheus?

7. Исследование (спросить как правильнее проводить)
	- Лучше поднять параллельно 4 сервиса, по паре будут в друг друга ходить, не задевая другую пару
	- [DONE] RT в виде квантилий
	- Лёгкие и тяжёлые запросы исследование
	- много запросов токена
8. Тестирование
	- накинуть юнит тесты на idP и клиента
	- Классы эквивалентности
*. Others
	- Не захломлять докер образами на каждый деплой (либо в teardown очищать)
		+ подумать как запускать без интернета


Swagger? Документация? Документация - РПЗ
IdP:
	- причем никто кроме админа не должен уметь эту ручку использовать.
	- база
	- RO, RW -> Read, Write
labeled errors?

Сайдкары:
	- ограничить ресурс вне неймспейса, иначе /query эндпоинт не имеет смысла если можно напрямую к БД подключиться

Метрики:
	- добавить метрики инфры, например размер стороджа (или таблицы) postgresql

UI:
	- пофиксить Настройки для всех сервисов обновлены! (после рефреша страницы пропадает)

Дашборд:
	- перепутаны местами метрики подписи и Количество проверок токена входящих запросов
	- [DONE] Квантили гистограмм в переменную (что такое гистограмма?)
	- Подправить названия, внимательно проверить лейблы
		шт/c тоже подумать
	- время выполнения -> среднее время выполнения
	- поправить редкие времена выполнения на rate[10m]
Бэкофф токена - есть, минимальный


single flight паттерн? 


