В РПЗ
- idP -> IdP
- обосновать почему вообще используется k8s как secret provider
	пояснить за serviceaccount token
	почему можно доверять namespace (один сервис не может представиться другим неймспейсом)

- В РПЗ и мб на слайд runScheduler + про размазывание рпс между iat и exp

- атомарно обновляем значения
	instance.SignAuthEnabled.Store(&data.Sign)
	instance.VerifyAuthEnabled.Store(&data.Verify)
	
DBaaS, PaaS паттерны?

+-------------------+          +-------------------+
|  Service A (Pod)  |          |  Service B (Pod)  |
|-------------------|          |-------------------|
| PostgreSQL        |          | PostgreSQL        |
| Sidecar (Golang)  | ---HTTP--> Sidecar (Golang)  |
+-------------------+          +-------------------+
       |                                |
       +-------- Kubernetes DNS -------+

На презу:
- Ключевые определения в начале (которые потом будут использоваться на протяжении всей презы) 
	- k8s
	- pod
	- контейнер
- Различие между сервисами и инфрой - подготовиться к объяснению инфры (постгря, кафка, талос, ...)
- Решение позволяет просто внедрять авторизацию в новые интеграции (постгря, кафка, redis, ...)
	
Рецензия:
Фнукциональные недостатки разработанного решения:
- refresh tokens
- emergency tokens
- отсутствие secret провайдера для сервисов вне куба
- простой бэкофф, нет разбивки на network error и другие
- нет ключи разных k8s  кластеров
- клиент реализован на Golang, в компании много сервисов на других языках
