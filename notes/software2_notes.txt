Kubernetes - оркестратор контейнеров, позволяет управлять множеством контейнеров на разных серверах централизованно.
Преимущества (реклама):
immutable [containers, nodes] (артефакт можно запустить на ноуте, сервер, ...)
declarative (декларативные конфиги)
self-healing (сервер может сам поднять упавший сервер)
decoupling [app, cluster] - каждый компонент независимый (один компонент упал - остальные продолжают работать, а не падают по эффекту домино)

API - центральная точка кубера, является REST

кубер - не совсем оркестратор, он полноценная кластерная-операционная система (lect2, 36:00)


kube spray [installer]?

pod - минимальная абстракция (!) k8s, одно запущенное приложение (1 инстанс). 
Внутри пода есть контейнеры, как минимум 2 - приложение и POD_... [несет в себе network namespaces].
Внутри пода по дефолту свои volume'ы у контейнеров, но можно делать и общие (можно даже у разных подов сделать общие)
нода - условный сервер, который будет запускаться в рамках запуска приложения (?)

прометей файл конфига можно подмонитровать средствами кубера. прометей не умеет отслеживать изменения в своем конфиге.
- можно взять еще один компонент component-reloader(?) - отдельный контейнер, живет в поде вместе с прометеем

ports:
	- containerPort: 80 # просто документация, кубер это игнорирует

ReplicaSet - под с указанном количеством экземпляров. Cоздатся N подов с именами <my-pod>-afds4, <my-pod>-opsd4, ...
По лейблу легко листить поды - k get pod -l ...

k scale --replicas 3 replicaset <> - скейлит до указанного количества подов

kubctl get pod - выводить все поды в неймспейсе
k describe po my-pod - выводит всю инфу про под, например IP, containers, mounts, conditions, events ...


postgres, redis, ... - PaaS? or DBaaS?
